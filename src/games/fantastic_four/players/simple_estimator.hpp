#ifndef GAIL_SIMPLE_ESTIMATOR_HPP
#define GAIL_SIMPLE_ESTIMATOR_HPP

#include <cstdint>
#include <array>
#include <algorithm>
#include <cassert>

#include "../fantastic_four.hpp"
#include "../clients.hpp"

namespace gail {
namespace fantastic_four {

// Model Lasso:
// P-score [39, 22, 13, 9, 6, 4, 3, 2]
// E-score 2.605
//
// that means:
// with 0.39 probability take from 1 try
// and 0.61 probability take best with no more 2 tries
// and 0.74 probability take best with no more 3 tries
// care that random estimator gives average 4.5 E-score

// Model Blind:
// P-score [15, 15, 13, 13, 12, 11, 9, 8]
// E-score 4.06824166667

const std::array<int, W> lasso_e4_intercept = {
    75347, 93807, 143362, 5504470, 3681078, 180261, 93424, 59522
};
const std::array<int, W> lasso_e4_secondplayer = {
    54475, -39547, -65772, 22890, 113552, -88840, -47381, 107182
};
const std::array<std::array<int, W>, H*W> lasso_e4_first = {{
    {-2747747,179121,671626,77932,0,564710,211619,746243},
    {451475,-2061841,282185,0,184,411843,312524,441574},
    {579837,288334,-2630368,33471,158161,722327,307258,128903},
    {214633,258304,-21592,-1247363,231872,-42790,250359,286319},
    {403812,364061,-49221,139961,-1308410,0,276889,166948},
    {187844,456425,310123,140040,32660,-2548217,237054,647861},
    {470410,305667,360393,82104,0,230019,-2000430,406963},
    {826661,385239,800379,113654,0,223929,179860,-2806401},
    {0,0,-10759,156892,64739,0,44048,-34450},
    {53307,-207320,-116953,179746,124420,0,66170,-35446},
    {0,-98953,-461163,185846,0,77383,126563,247457},
    {0,219513,-26168,-415361,239586,-97399,0,85995},
    {36714,-121818,-90251,258612,-485411,65781,187467,85626},
    {258105,-13773,0,0,1228,-131917,38690,66572},
    {76822,99272,-97678,70771,16702,-96047,-81387,70166},
    {-17997,80537,0,16997,94725,-57605,0,61095},
    {-1564435,156120,-123730,196942,173721,201936,375684,423361},
    {138087,-470525,-30471,15890,129808,-50802,154793,152717},
    {15106,-37810,-105747,-53514,29866,0,0,132391},
    {287337,-207432,-27199,-283053,165630,81167,-325473,312301},
    {298887,-444151,177919,329566,-314881,45235,-128712,61115},
    {-30288,118990,0,0,0,-156437,0,88790},
    {15268,116452,73525,230733,99951,-133834,-521302,37390},
    {408551,325631,426297,232133,186218,-289884,122485,-1516137},
    {-851532,117842,121360,0,0,121481,0,421},
    {126974,-2154746,212523,261876,0,220520,546087,218343},
    {0,0,-426230,183843,-122859,16330,0,0},
    {296582,286081,212961,-2571824,141819,262702,864712,84098},
    {139309,657689,310329,299381,-2418628,274930,77542,174870},
    {0,144671,85586,-16488,185973,-1046498,0,76121},
    {254230,574624,167431,72450,240212,185613,-2120483,97992},
    {126275,59003,0,0,0,287931,0,-1059758},
    {2051928,-148983,-156882,-187986,-169378,-247798,-167574,-391677},
    {-259547,1991089,0,-171342,-132605,-136986,-451502,-324736},
    {-96976,-234798,1244804,11133,-136865,-237601,-215970,-105000},
    {-82933,-327024,20325,1379082,-464447,46718,-237938,0},
    {-153943,-565354,11294,-729947,2335031,0,-414199,-137083},
    {-336075,-38019,-225832,-154005,-241056,2172331,-189675,-477269},
    {-419918,-406745,-51053,-5140,-251507,-94224,2029898,-290805},
    {-287075,-239383,-304733,-83132,-211523,0,-282471,2040704},
    {-903475,54256,-27276,141335,142416,-58784,97406,177294},
    {0,-628763,101700,178670,211408,0,-76957,-54041},
    {74892,-170629,599115,-197496,-139189,-70757,-102290,-76329},
    {142141,746018,86661,-1105525,-1003380,0,574029,45245},
    {199790,622804,-24572,-251399,-1477891,-112875,763030,85115},
    {0,-28680,-162976,0,-274750,551141,-76050,-72093},
    {31221,-67147,2151,326081,82733,125822,-707093,-143573},
    {17216,-72220,-54568,259568,26035,-49114,127734,-622945},
    {1843501,-123000,-217014,-207653,-405383,-198200,-399795,-95463},
    {-313034,1550015,27169,-372265,-580323,-80162,-15235,-83713},
    {-79980,-129693,203227,14879,-157330,34104,0,41207},
    {-65041,-69055,253928,-2310724,2326917,123297,0,-54678},
    {0,0,105018,1049234,-1302559,121380,-1534,0},
    {153677,-64458,108342,-63769,0,-3194,-146304,-23555},
    {-34486,75776,-178208,-913472,-167306,-41796,1679835,-235052},
    {-132184,-288895,-318805,-412910,-194597,-221975,-157249,1905373},
}};
const std::array<std::array<int, W>, H*W> lasso_e4_second = {{
    {-2809781,258204,668073,0,29147,840938,182822,635779},
    {288325,-2045839,300580,20157,36175,545833,320959,439619},
    {787067,233128,-2509976,-42762,115767,576397,243116,321340},
    {188112,264187,3830,-1226215,271786,10766,196649,293278},
    {454128,343427,-66987,126848,-1274965,0,290835,220336},
    {343215,468296,535450,3302,30805,-2667288,0,858932},
    {441233,307421,597441,-36887,8722,210293,-2026504,484202},
    {631437,516780,830626,91463,128277,374324,0,-2785617},
    {0,64741,-39697,3438,104691,0,154547,0},
    {146009,-278354,-196006,129190,191857,6056,88567,12200},
    {0,0,-426987,0,-27635,0,136623,506396},
    {-3163,215491,-14586,-259421,159316,-82282,0,82555},
    {833,0,-63990,131756,-368913,-90282,259822,168580},
    {338948,150715,173074,0,40456,-249537,-68503,-57242},
    {2443,207525,-13402,63767,102355,-125169,-83770,0},
    {116642,28625,-32385,0,49642,0,0,71561},
    {-1581790,252343,-70780,149858,240999,205082,337252,393463},
    {187848,-410223,-11170,0,128269,22613,177047,0},
    {0,-113404,-133129,0,194734,0,164448,0},
    {182456,-233535,20430,-140789,45010,191160,-283737,279405},
    {230641,-282550,188707,203468,-197122,-7828,-76837,68197},
    {78608,-44938,39863,174684,0,-252826,72911,19711},
    {6621,78766,47075,237975,135947,-58965,-551110,113845},
    {276468,270990,309412,232453,203596,-173841,329427,-1462496},
    {-770389,-45773,295535,19978,79442,80719,2765,-28550},
    {146617,-1940698,129686,205940,97036,234008,415702,195276},
    {47605,-107782,-232594,44511,69920,-37740,115398,-72007},
    {222028,252065,231574,-2557950,0,249725,1051454,215230},
    {236904,897010,233913,1985,-2338081,236504,96326,254736},
    {207169,2465,40634,190530,0,-1040304,54085,-10069},
    {312781,301347,160076,0,361954,252778,-1979281,147661},
    {0,0,0,5191,152209,366125,128410,-1104996},
    {2126116,-212801,0,-238249,-122861,-156581,-306696,-455861},
    {-387437,2269884,0,-224066,-34867,-215059,-585703,-227926},
    {-163848,-257907,1431135,-43884,-56366,-208150,-136048,-164900},
    {-45310,-412223,70985,1459075,-642852,82855,-63064,-40641},
    {-241267,-327697,5463,-968791,2440314,55291,-473426,-71454},
    {-291404,-326673,-297796,-216682,0,2218386,-182178,-319061},
    {-254933,-589031,-183214,0,-272669,0,2144274,-225943},
    {-421855,-222635,-146564,-171507,-115512,-22574,-280632,2118155},
    {-825527,95742,-22015,143188,106704,-7555,36269,140826},
    {-52397,-513158,120646,104459,207344,34298,-159384,63800},
    {-100480,-154832,642120,-8694,-41415,496,-134270,-171324},
    {166527,736128,57706,-818613,-1123362,63155,473295,57959},
    {114420,654381,-49239,-492554,-1147885,0,681105,163962},
    {-60033,-124466,-66631,-35778,0,385933,-107230,45823},
    {171455,-93628,7509,249577,46520,77856,-698740,-4116},
    {0,-34250,162174,118501,84542,-76456,43644,-602217},
    {1949615,-133827,-186812,-388156,-344929,-137001,-345917,-115260},
    {-300843,1620516,-144065,-488315,-325121,-18668,-41578,-49551},
    {-39964,-36926,2467,6974,-213262,204824,-54718,178452},
    {0,0,-196428,-1518121,2556939,-112237,-219527,0},
    {-41806,-163957,-196423,2001738,-1089510,-105579,-144650,0},
    {67703,0,234381,16047,-129338,0,-154268,1744},
    {-102335,47274,-93938,-657267,-279581,-124362,1670617,-191746},
    {-226952,-247132,-247728,-368709,-226165,-147057,-202494,1939723},
}};

struct MoveEstimator {
private:
  std::array<int, W> score;
  void add(const std::array<int, W>& w) {
    for (int i = 0; i < W; ++i) score[i] += w[i];
  }
  void sub(const std::array<int, W>& w) {
    for (int i = 0; i < W; ++i) score[i] -= w[i];
  }
public:
  MoveEstimator(const Field& f, int player) {
    std::copy(lasso_e4_intercept.begin(),
      lasso_e4_intercept.end(),
      score.begin());
  }
  void prediction(std::array<PlayerAction, W> &order) const {
    for (int i = 0; i < W; ++i) order[i] = PlayerAction(i);
    std::sort(order.begin(), order.end(), [this] (const PlayerAction& p, const PlayerAction& q) {
      return std::make_pair(score[p.column], -p.column) >
             std::make_pair(score[q.column], -q.column);
    });
  }
  MoveEstimator make(int player, int i, int j) const {
    MoveEstimator r(*this);
    if (player == FIRST_PLAYER) {
      r.add(lasso_e4_secondplayer);
      r.add(lasso_e4_first[i * W + j]);
    } else if (player == SECOND_PLAYER) {
      r.sub(lasso_e4_secondplayer);
      r.add(lasso_e4_second[i * W + j]);
    }
    return r;
  }
};

} // namespace fantastic_four
} // namespace gail

#endif //GAIL_SIMPLE_ESTIMATOR_HPP
